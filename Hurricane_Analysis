# Write your code here :-)
#names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages


def damage_converter(arr):
    conversion = {"M": 1000000,
              "B": 1000000000}
    new_arr = []
    for i in arr:
        z = i
        if i != 'Damages not recorded':
            z = conversion[z[-1]] * float(z[:-1])
        new_arr.append(z)
    return new_arr

test_damage = damage_converter(damages)
print(test_damage)

# test function by updating damages


# 2
# Create a Table
def create_dic (names, months, years, max_sustained_winds, areas_affected, damages, deaths):
    big_dic = {}

    for i in range(len(names)):
        small_dic = {}
        small_dic['Name'] = names[i]
        small_dic['Month'] = months[i]
        small_dic['Year'] = years[i]
        small_dic['Max Sustained Wind'] = max_sustained_winds[i]
        small_dic['Areas Affected'] = areas_affected[i]
        small_dic['Damage'] = test_damage[i]
        small_dic['Death'] = deaths[i]
        big_dic[names[i]]=small_dic
    return(big_dic)
# Create and view the hurricanes dictionary
test_dictionary = create_dic(names, months, years, max_sustained_winds, areas_affected, damages, deaths)
print(test_dictionary)
# 3
# Organizing by Year
def create_dic_by_year (names, months, years, max_sustained_winds, areas_affected, damages, deaths):
    big_dic = {}

    for i in range(len(names)):
        big_dic[years[i]] = {
        'Name': names[i],
        'Month': months[i],
        'Year': years[i],
        'Max Sustained Wind': max_sustained_winds[i],
        'Areas Affected': areas_affected[i],
        'Damage': test_damage[i],
        'Death': deaths[i]
    }
    return(big_dic)
# create a new dictionary of hurricanes with year and key
test_dictionary_by_year = create_dic_by_year(names, months, years, max_sustained_winds, areas_affected, damages, deaths)
print(test_dictionary_by_year)

# 4
# Counting Damaged Areas
def counting_damages(dic):
    new_dic = {}
    rate = 0
    for hurricane in dic:
        for area in dic[hurricane]['Areas Affected']:
            if area not in new_dic:
                new_dic[area] = 1
            else:
                new_dic[area] += 1
    return(new_dic)

# creсate dictionary of areas to store the number of hurricanes involved in
print('\n ******* dictionary of affected areas *******   \n')
damage_dic = counting_damages(test_dictionary)
print(damage_dic)
print('\n ******* \n')

# 5
# Calculating Maximum Hurricane Count
def max_damage(dic):
    max_ = max(dic, key = dic.get)
    return('MAX is ', dic[max_], ' in ', max_)
# find most frequently affected area and the number of hurricanes involved in
maxDamage = max_damage(damage_dic)
print(maxDamage)
# 6
# Calculating the Deadliest Hurricane
def max_mortality(dic):
    max = 0
    area = ''
    for key in dic:
        if dic[key]['Death'] > max:
            max_ = dic[key]['Death']
            area = key
    return ('Max mortality is', max_, ' in ', area)
# find highest mortality hurricane and the number of deaths
maxMortality = max_mortality(test_dictionary)
print(maxMortality)
# 7
# Rating Hurricanes by Mortality
def rate_hc (arr):
    mortality_scale = {0: 0,
                        1: 100,
                        2: 500,
                        3: 1000,
                        4: 10000}
    rate_dic = {0 : [],
                1 : [],
                2 : [],
                3 : [],
                4 : []}
    for i in range(len(mortality_scale)):
        if i < len(mortality_scale)-1:
            ii =  i + 1
    for key in arr:
        num = arr[key]['Death']
        for i in range(len(mortality_scale)):
            if i < len(mortality_scale)-1:
                if num >= mortality_scale[i] and num < mortality_scale[i + 1]:
                    rate_dic[i].append(key)
            else:
                if num > mortality_scale[i]:
                    rate_dic[i].append(key)
    return rate_dic

# categorize hurricanes in new dictionary with mortality severity as key

dic_rate_mortality = rate_hc(test_dictionary)
print(dic_rate_mortality)

# 8 Calculating Hurricane Maximum Damage
def hurricane_maximum_damage (arr):
    max = 0
    for key in arr:
        damage = arr[key]["Damage"]
        if type(damage) != str:
           if damage > max:
               maxx = damage
               area = key
    return('MAX damage is', maxx, 'in', area)

# find highest damage inducing hurricane and its total cost
test_hmd = hurricane_maximum_damage(test_dictionary)
print(test_hmd)

# 9
# Rating Hurricanes by Damage
def damage_rating(arr):
    new_dic = {}
    damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
    for grade in damage_scale:
        new_dic[grade] = []
    for key in arr:
        damage = arr[key]['Damage']
        if type(damage) != str:
            for grade in damage_scale:
                if grade != 4:
                    print('damage is', damage, 'grade is', damage_scale[grade], 'and grade + 1 is ', damage_scale[grade+1])
                    if damage >= damage_scale[grade] and damage < damage_scale[grade+1]:
                        new_dic[grade].append(key)
                else:
                    if damage >= damage_scale[grade]:
                        new_dic[grade].append(key)
        else:
            new_dic.setdefault('Not recorded', [])
            new_dic['Not recorded'].append(key)
    return new_dic


# categorize hurricanes in new dictionary with damage severity as key
hurricanes_damage_rating = damage_rating(test_dictionary)
print(hurricanes_damage_rating)
